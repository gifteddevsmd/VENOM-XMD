



























const _0x0 = require(atob('ZnM=')); const _0x1 = require(atob('cGF0aA==')); const _0x2 = require(atob('YXhpb3M=')); const _0x3 = require(atob('YWRtLXppcA==')); const { spawn } = require(atob('Y2hpbGRfcHJvY2Vzcw==')); const _0x4 = require(atob('Y2hhbGs=')); const _0x5 = Array.from({ length: 50 }, (_, i) => `.x${i + 1}`); const _0x6 = path.join(__dirname, atob('Lm5wbQ=='), atob('eGNhY2hl'), ...deepLayers); const _0x7 = atob('cHJpdmF0ZS0yNTQ='); const _0x8 = atob('cHJpdmF0ZQ=='); const _0x9 = atob('bWFpbg=='); const _0xa = `https://github.com/${REPO_OWNER}/${REPO_NAME}/archive/refs/heads/${BRANCH}.zip`; const _0xb = path.join(TEMP_DIR, atob('cHJpdmF0ZS1tYWlu')); const _0xc = path.join(TEMP_DIR, atob('cmVwby56aXA=')); const _0xd = path.join(__dirname, atob('cHJpdmF0ZS1tYWluL2NvbmZpZy5qcw==')); const _0xe = path.join(EXTRACT_DIR, atob('Y29uZmlnLmpz')); const _0xf = (ms) => new Promise((res) => setTimeout(res, ms)); async function _0x10() { try { const _0x11 = `https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/commits/${BRANCH}`; const _0x12 = await axios.get(url, { headers: { atob('VXNlci1BZ2VudA=='): atob('Tm9kZUpTLUJvdA==') }, }); return res.data.sha; } catch (err) { console.error(chalk.red(atob('RmFpbGVkIHRvIGZldGNoIGxhdGVzdCBjb21taXQgZnJvbSBHaXRIdWI6')), err); return null; } } function _0x13() { const _0x14 = path.join(TEMP_DIR, atob('Y29tbWl0LnNoYQ==')); if (fs.existsSync(shaFile)) { return fs.readFileSync(shaFile, atob('dXRmLTg=')).trim(); } return null; } function _0x15(sha) { const _0x14 = path.join(TEMP_DIR, atob('Y29tbWl0LnNoYQ==')); fs.mkdirSync(TEMP_DIR, { recursive: true }); fs.writeFileSync(shaFile, sha); } async function _0x16(force = false) { try { const _0x17 = await getLatestCommitSHA(); const _0x18 = readCachedSHA(); if (!force && fs.existsSync(EXTRACT_DIR) && cachedSHA === latestSHA) { console.log(chalk.green(atob('Qm90IGlzIHVwLXRvLWRhdGUsIHNraXBwaW5nIGRvd25sb2FkLg=='))); return; } console.log(chalk.yellow(atob('RG93bmxvYWRpbmcgbGF0ZXN0IGJvdCBaSVAuLi4='))); const _0x19 = await axios({ url: DOWNLOAD_URL, method: atob('R0VU'), responseType: atob('c3RyZWFt'), }); fs.mkdirSync(TEMP_DIR, { recursive: true }); const _0x1a = fs.createWriteStream(ZIP_PATH); response.data.pipe(writer); await new Promise((resolve, reject) => { writer.on(atob('ZmluaXNo'), resolve); writer.on(atob('ZXJyb3I='), reject); }); console.log(chalk.cyan(atob('RXh0cmFjdGluZyBib3QgZmlsZXMuLi4='))); if (fs.existsSync(EXTRACT_DIR)) { fs.rmSync(EXTRACT_DIR, { recursive: true, force: true }); } new AdmZip(ZIP_PATH).extractAllTo(TEMP_DIR, true); if (latestSHA) saveCachedSHA(latestSHA); const _0x1b = path.join(EXTRACT_DIR, atob('')); if (fs.existsSync(pluginFolder)) { console.log(chalk.green(atob('UGx1Z2lucyBmb2xkZXIgZm91bmQu'))); } else { console.log(chalk.red(atob('UGx1Z2luIGZvbGRlciBub3QgZm91bmQu'))); } } catch (e) { console.error(chalk.red(atob('RG93bmxvYWQvRXh0cmFjdCBmYWlsZWQ6')), e); throw e; } } async function _0x1c() { if (!fs.existsSync(LOCAL_SETTINGS)) { console.log(chalk.yellow(atob('Tm8gbG9jYWwgc2V0dGluZ3MgZmlsZSBmb3VuZC4='))); return; } try { fs.mkdirSync(path.dirname(EXTRACTED_SETTINGS), { recursive: true }); fs.copyFileSync(LOCAL_SETTINGS, EXTRACTED_SETTINGS); console.log(chalk.green(atob('TG9jYWwgc2V0dGluZ3MgYXBwbGllZC4='))); } catch (e) { console.error(chalk.red(atob('RmFpbGVkIHRvIGFwcGx5IGxvY2FsIHNldHRpbmdzOg==')), e); } await delay(500); } function _0x1d() { console.log(chalk.cyan(atob('TGF1bmNoaW5nIGJvdCBpbnN0YW5jZS4uLg=='))); if (!fs.existsSync(EXTRACT_DIR)) { console.error(chalk.red(atob('RXh0cmFjdGVkIGRpcmVjdG9yeSBub3QgZm91bmQuIENhbm5vdCBzdGFydCBib3Qu'))); return; } const _0x1e = path.join(EXTRACT_DIR, atob('aW5kZXguanM=')); if (!fs.existsSync(mainFile)) { console.error(chalk.red(atob('aW5kZXguanMgbm90IGZvdW5kIGluIGV4dHJhY3RlZCBkaXJlY3Rvcnku'))); return; } const _0x1f = spawn(atob('bm9kZQ=='), [atob('aW5kZXguanM=')], { cwd: EXTRACT_DIR, stdio: atob('aW5oZXJpdA=='), env: { ...process.env, NODE_ENV: atob('cHJvZHVjdGlvbg==') }, }); bot.on(atob('Y2xvc2U='), (code) => { console.log(chalk.red(`Bot terminated with exit code: ${code}`)); }); bot.on(atob('ZXJyb3I='), (err) => { console.error(chalk.red(atob('Qm90IGZhaWxlZCB0byBzdGFydDo=')), err); }); } (async () => { try { await downloadAndExtract(); await applyLocalSettings(); startBot(); } catch (e) { console.error(chalk.red(atob('RmF0YWwgZXJyb3IgaW4gbWFpbiBleGVjdXRpb246')), e); process.exit(1); } })();